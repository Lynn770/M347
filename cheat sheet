Hier ist eine strukturierte Zusammenfassung der Lernziele f√ºr die 2. Pr√ºfung im Modul 347, inklusive Beispielen und Schritt-f√ºr-Schritt-Erkl√§rungen:
üß± Dockerfile
Lernziele:
Einsatz von Multistage-Containern verstehen
Einen Multistage-Container erstellen
Fehler in einem Dockerfile erkennen

Beispiel & Erkl√§rung:
Was ist ein Multistage-Build?
Ein Multistage-Build teilt den Build-Prozess in mehrere Phasen auf. Vorteil: Der finale Container enth√§lt nur die notwendigen Artefakte ‚Äì keine Tools oder tempor√§ren Dateien.

Schritt-f√ºr-Schritt:
Erstelle ein Dockerfile:
    # 1. Build Stage
    FROM node:18 as builder
    WORKDIR /app
    COPY . .
    RUN npm install && npm run build
    # 2. Production Stage
    FROM nginx:alpine
    COPY --from=builder /app/dist /usr/share/nginx/html

Baue das Image:
    docker build -t my-multistage-app .

Starte den Container:
    docker run -p 8080:80 my-multistage-app

üìÑ YAML
Lernziel:
Aufbau eines YAML-Files verstehen
Erkl√§rung & Beispiel:
YAML ist ein einfaches, lesbares Format f√ºr Konfigurationsdateien.
 name: Beispiel
 version: "1.0"
 services:
   web:
     image: nginx
     ports:
       - "8080:80"

üîß Docker Compose
Lernziele:
Wichtige Schl√ºsselw√∂rter kennen:
image, build, container_name, restart, environment, volumes, ports, expose, networks, secrets

 
Schl√ºsselwort	Bedeutung
image	Image-Name
build	Pfad zum Dockerfile
container_name	Fester Name des Containers
restart	z.‚ÄØB. always, unless-stopped
environment	Umgebungsvariablen
volumes	Daten zwischen Host und Container teilen
ports	Ports auf Host und Container verkn√ºpfen
expose	Nur intern sichtbarer Port
networks	Virtuelle Netzwerke
secrets	Vertrauliche Daten wie Passw√∂rter √ºbergeben

Eine Multi-Container-Anwendung orchestrieren
Ein .NET-Projekt containerisieren
Fehler in docker-compose.yml finden
Netzwerk f√ºr Services einrichten
docker compose up/down mit Optionen -d und --build verwenden

Beispiel & Erkl√§rung:
Schritt-f√ºr-Schritt: einfache docker-compose.yml
version: "3.8"
services:
  web:
    image: nginx
    container_name: nginx_web
    ports:
      - "8080:80"
    networks:
      - app-network
  api:
    build: ./api
    container_name: dotnet_api
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    networks:
      - app-network
networks:
  app-network:

Kommandos:
docker compose up -d --build
docker compose down

üîê Docker Secrets
Lernziel:
Verwendung von Secrets zur sicheren √úbergabe von Passw√∂rtern
Schritt-f√ºr-Schritt:
Secret-Datei erstellen:

echo "mysecretpassword" | docker secret create db_password -

In docker-compose.yml verwenden:

services:
  db:
    image: mysql
    secrets:
      - db_password
secrets:
  db_password:
    external: true


üß© Microservices
Lernziel:
Begriff Microservice erkl√§ren und Vor-/Nachteile nennen

Erkl√§rung:
Ein Microservice ist ein kleiner, in sich geschlossener Dienst, der eine spezifische Funktion erf√ºllt.

Vorteile:
Skalierbarkeit
Unabh√§ngige Entwicklung
Technologische Freiheit
Nachteile:
Komplexere Kommunikation
Verteiltes Debugging
H√∂herer Overhead bei Deployment
